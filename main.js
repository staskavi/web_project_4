!function(){"use strict";var e={349:function(e,t,n){e.exports=n.p+"4e8e0a1d604782a0dff8.svg"},277:function(e,t,n){e.exports=n.p+"73fb6160ad02caf5ee30.jpg"},878:function(e,t,n){e.exports=n.p+"3192076df70232ea2c56.png"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.p="",function(){var e=n(878),t=n(349),r=n(277);function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n,r,o){var i=o.handleCardClick,a=o.handleCardDelete,u=o.handleCardLike;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=t.name,this._image=t.link,this._template=n,this._handleCardClick=i,this._likes=t.likes,this._ownerId=t.owner._id,this._id=t._id,this._userId=r,this._handleCardClick=i,this._handleCardDelete=a,this._handleCardLike=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return this._template.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._cardElement.querySelector(".element__btn-del").addEventListener("click",(function(){e._handleCardDelete(e._id)})),this._cardElement.querySelector(".element__btn-like").addEventListener("click",(function(){e._handleCardLike(e._id)})),this._cardElement.querySelector(".element__image").addEventListener("click",(function(){e._handleCardClick(e._text,e._image)}))}},{key:"_setAttributes",value:function(e,t){for(var n in t)e.setAttribute(n,t[n])}},{key:"_displayDeleteButton",value:function(){this._userId!=this._ownerId&&(this._cardElement.querySelector(".element__btn-del").style.display="none")}},{key:"_populateLikes",value:function(){var e=this;this._likes.forEach((function(t){return t._id===e._userId?e.likeCard():e.dislikeCard()}))}},{key:"generateCard",value:function(){return this._cardElement=this._getTemplate(),this.likeIcon=this._cardElement.querySelector(".element__btn-like"),this._setAttributes(this._cardElement.querySelector(".element__image"),{src:this._image,alt:this._text}),this._displayDeleteButton(),this.numOfLikes(this._likes.length),this._cardElement.querySelector(".element__title").textContent=this._text,this._setEventListeners(this.cardElement),this._populateLikes(),this._cardElement}},{key:"likeCard",value:function(){this.likeIcon.classList.add("element__btn-like_active")}},{key:"dislikeCard",value:function(){this.likeIcon.classList.remove("element__btn-like_active")}},{key:"deleteCard",value:function(){this._cardElement.remove(),this._cardElement=null}},{key:"isLiked",value:function(){return this.likeIcon.classList.contains("element__btn-like_active")}},{key:"numOfLikes",value:function(e){this._cardElement.querySelector(".element__num-of-likes").textContent=e}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}},{key:"renderer",value:function(){this._items.forEach(this._renderer)}}])&&a(t.prototype,n),e}(),l=function(e,t){e.querySelector(".form__btn-save").textContent=t?"Loading...":"Save"},c={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__btn-save",inactiveButtonClass:"form__btn-save_disabled",inputErrorClass:"form__input-texterror",errorClass:"form__input-error_active"},s="popup_opened",f=".popup__btn-close",h=document.querySelector(".profile__btn-edit"),d=document.querySelector(".profile__btn-add"),p=document.querySelector(".popup-edit"),_=document.querySelector(".popup-add"),m=document.querySelector(".popup-image"),y=document.querySelector("#element-template").content,v=document.querySelector(".popup-change-profile-img"),b=document.querySelector(".profile__btn-avatar-edit"),k=document.querySelector(".popup-del-card");function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),E(this,"_handleEscapeClose",(function(e){"Escape"===e.key&&n.close()})),E(this,"_handleCloseBtn",(function(){n.close()})),E(this,"_handleOverlayClose",(function(e){e.target===e.currentTarget&&n.close()})),this._popup=t}var t,n;return t=e,(n=[{key:"setEventListeners",value:function(){this._popup.querySelector(f).addEventListener("click",this._handleCloseBtn),document.addEventListener("keydown",this._handleEscapeClose),this._popup.addEventListener("click",this._handleOverlayClose)}},{key:"removeEventListeners",value:function(){this._popup.querySelector(f).removeEventListener("click",this._handleCloseBtn),document.removeEventListener("keydown",this._handleEscapeClose),this._popup.removeEventListener("click",this._handleOverlayClose)}},{key:"open",value:function(){this._popup.classList.add(s),this.setEventListeners()}},{key:"close",value:function(){this._popup.classList.remove(s),this.removeEventListeners()}}])&&g(t.prototype,n),e}();function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t,n){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},L(e,t,n||e)}function O(e,t){return O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},O(e,t)}function I(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._popup.querySelector(".popup__image-photo"),t._title=t._popup.querySelector(".popup__image-title"),t}return t=a,(n=[{key:"open",value:function(e,t){L(q(a.prototype),"open",this).call(this),this._image.setAttribute("src",t),this._image.setAttribute("alt",e),this._title.textContent=e}}])&&w(t.prototype,n),a}(S);function P(e){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t,n){return R="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=U(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},R(e,t,n||e)}function T(e,t){return T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},T(e,t)}function A(e,t){if(t&&("object"===P(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return B(e)}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function U(e){return U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},U(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=U(r);if(o){var n=U(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e){var t,n,r,o,u=e.popup,l=e.handleSubmitForm;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),o=function(e){return e.preventDefault(),t._handleSubmitForm(t._getInputValues())},(r="handleSubmitForm")in(n=B(t=i.call(this,u)))?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,t._handleSubmitForm=l,t._form=t._popup.querySelector("form"),t._inputList=t._popup.querySelectorAll(".form__input"),t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setNewHandler",value:function(e){this._handleSubmitForm=e}},{key:"close",value:function(){R(U(a.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){R(U(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",this.handleSubmitForm)}},{key:"removeEventListeners",value:function(){R(U(a.prototype),"removeEventListeners",this).call(this),this._form.removeEventListener("submit",this.handleSubmitForm)}}])&&x(t.prototype,n),a}(S);function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var F=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._about=document.querySelector(n),this._image=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about,r=e.avatar;this._name.textContent=t,this._about.textContent=n,this._image.src=r}}])&&D(t.prototype,n),e}();function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function H(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var J=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),H(this,"_showInputError",(function(e,t){var n=r._inputSettings,o=n.inputErrorClass,i=n.errorClass,a=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(o),a.textContent=t,a.classList.add(i)})),H(this,"_hideInputError",(function(e){var t=r._inputSettings,n=t.inputErrorClass,o=t.errorClass,i=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(n),i.classList.remove(o),i.textContent=""})),H(this,"_hasInvalidInput",(function(){return r._inputList.some((function(e){return!e.validity.valid}))})),H(this,"_toggleButtonState",(function(){var e=r._inputSettings.inactiveButtonClass;r._hasInvalidInput()?(r._buttonElement.classList.add(e),r._buttonElement.disabled=!0):(r._buttonElement.classList.remove(e),r._buttonElement.disabled=!1)})),H(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),H(this,"_setEventListeners",(function(){var e=r._inputSettings,t=e.inputSelector,n=e.submitButtonSelector;r._buttonElement=r._formElement.querySelector(n),r._inputList=Array.from(r._formElement.querySelectorAll(t)),r._toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r._toggleButtonState()}))}))})),this._inputSettings=t,this._formElement=n}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}},{key:"resetValidation",value:function(){this._inputList.forEach(this._hideInputError),this._toggleButtonState()}}])&&N(t.prototype,n),e}();function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var M=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=n,this._headers=r}var t,n;return t=e,(n=[{key:"_handleResponse",value:function(e){return e.ok?e.json():(console.log("".concat(e.status,": ").concat(e.statusText)),Promise.reject("".concat(e.status,": ").concat(e.statusText)))}},{key:"getAll",value:function(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then(this._handleResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then(this._handleResponse)}},{key:"updateUserInfo",value:function(e){var t=e.editName,n=e.editAbout;return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then(this._handleResponse)}},{key:"updateUserImage",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}},{key:"addNewCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:n})}).then(this._handleResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}},{key:"likeCard",value:function(e){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._handleResponse)}},{key:"dislikeCard",value:function(e){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}}])&&G(t.prototype,n),e}();function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}document.querySelector("link").href=e,document.querySelector(".header__logo").src=t,document.querySelector(".profile__image").src=r;var $=new M({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"064fc825-8a38-497e-b79d-9599b0efc019","content-type":"application/json"}}),K=new j(m),Q=new J(c,v),W=new J(c,p),X=new J(c,_);Q.enableValidation(),W.enableValidation(),X.enableValidation(),$.getAll().then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1],c=new F(".profile__title",".profile__subtitle",".profile__image");c.setUserInfo(a);var s=new V({popup:k}),f=function(e){var t=new i(e,y,a._id,{handleCardClick:function(e,t){K.open(e,t)},handleCardDelete:function(e){s.open(),s.setNewHandler((function(){$.deleteCard(e).then((function(){t.deleteCard(),s.close()})).catch((function(e){return console.log(e)}))}))},handleCardLike:function(e){t.isLiked()?$.dislikeCard(e).then((function(e){t.dislikeCard(),t.numOfLikes(e.likes.length)})):$.likeCard(e).then((function(e){t.likeCard(),t.numOfLikes(e.likes.length)})).catch((function(e){return console.log(e)}))}});return t},m=new u({items:o,renderer:function(e){m.addItem(f(e).generateCard())}},".elements__list");m.renderer();var g=new V({popup:_,handleSubmitForm:function(e){l(_,!0),$.addNewCard(e).then((function(e){m.prependItem(f(e).generateCard())})).then((function(){g.close()})).catch((function(e){return console.log(e)})).finally((function(){return l(_,!1)}))}});d.addEventListener("click",(function(){X.resetValidation(),g.open()}));var E=new V({popup:p,handleSubmitForm:function(e){l(p,!0),$.updateUserInfo(e).then((function(e){c.setUserInfo(e)})).then((function(){E.close()})).catch((function(e){return console.log(e)})).finally((function(){return l(p,!1)}))}});h.addEventListener("click",(function(){W.resetValidation();var e=c.getUserInfo(),t=e.name,n=e.about;document.querySelector(".profile-name").value=t,document.querySelector(".profile-about").value=n,E.open()}));var S=new V({popup:v,handleSubmitForm:function(e){l(v,!0),$.updateUserImage(e.avatar).then((function(e){c.setUserInfo(e)})).then((function(){S.close()})).catch((function(e){return console.log(e)})).finally((function(){l(v,!1)}))}});b.addEventListener("click",(function(){Q.resetValidation(),S.open()}))})).catch((function(e){return console.log(e)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,